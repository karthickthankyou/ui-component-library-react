{"version":3,"sources":["components/Label/Label.js","components/Label/index.js","components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/TextInputStyledComponents/TextInputStyledComponents.js","components/TextInputStyledComponents/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","components/TextInputBEM/TextInputBEM.js","components/TextInputBEM/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","../config/componentData.js","docs/examples/EyeIcon/ExampleEyeIcon.js","docs/examples/Label/ExampleLabelOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example65Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","docs/examples/TextInputBEM/ExampleError.js","docs/examples/TextInputBEM/ExampleOptional.js","docs/examples/TextInputStyledComponents/ExampleError.js","docs/examples/TextInputStyledComponents/ExampleOptional.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleForm.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleTextInputCSSExample.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","index.js"],"names":["Label","htmlFor","label","required","style","display","color","ProgressBar","getColor","percent","props","getWidthAsPercentOfTotalWidth","parseInt","width","this","height","border","backgroundColor","React","Component","defaultProps","TextInput","htmlId","name","type","onChange","placeholder","value","error","children","marginBottom","id","className","Error","styled","div","Input","input","Fieldset","EyeIcon","xmlns","viewBox","transform","fill","d","cx","cy","r","PasswordInput","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","length","module","exports","EyeIconExample","ExampleOptional","ExampleRequired","ExampleAllFeatures","password","target","minLength","getQuality","Example10Percent","ExampleError","RegistrationForm","user","onSubmit","validate","submitted","email","errors","minPasswordLength","Object","getOwnPropertyNames","confirmationMessage","passwordQuality","ExampleRegistrationForm","console","log","HelloWorld","message","ExampleHelloWorld","styles","fieldset","inputError","TextInputCSSModules","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","showCode","example","description","ExampleComponent","require","componentName","default","Props","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","ReactDOM","render","document","getElementById"],"mappings":"sKAuBeA,MAnBf,YAA8C,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC7B,OACI,2BAAOC,MAAO,CAAEC,QAAS,SAAWJ,QAASA,GACxCC,EADL,IACaC,GAAY,0BAAMC,MAAO,CAAEE,MAAO,QAAtB,QCPjC,mC,qFCGMC,E,2MACFC,SAAW,SAACC,GACR,OAA2B,MAAvB,EAAKC,MAAMD,QAAwB,QAChC,EAAKC,MAAMD,QAAU,GAAK,aAAe,O,EAGpDE,8BAAgC,WAC5B,OAAOC,SAAS,EAAKF,MAAMG,OAAS,EAAKH,MAAMD,QAAU,KAAM,K,wEAGzD,IAAD,EAC8BK,KAAKJ,MAAhCD,EADH,EACGA,QAASI,EADZ,EACYA,MAAOE,EADnB,EACmBA,OACxB,OACI,yBAAKX,MAAO,CAAEY,OAAQ,sBAAuBH,MAAOA,IAChD,yBAAKT,MAAO,CACRS,MAAOC,KAAKH,gCACZI,SACAE,gBAAiBH,KAAKN,SAASC,W,GAjBzBS,IAAMC,WAmChCZ,EAAYa,aAAe,CACvBL,OAAQ,GAGGR,QC1Cf,mC,+DCwDec,MAnDf,YAAuI,IAAlHC,EAAiH,EAAjHA,OAAQC,EAAyG,EAAzGA,KAAMrB,EAAmG,EAAnGA,MAAmG,IAA5FsB,YAA4F,MAArF,OAAqF,MAA7ErB,gBAA6E,SAA3DsB,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAanB,EAAS,+GAClI,OACI,yBAAKN,MAAO,CAAE0B,aAAc,KACxB,kBAAC9B,EAAA,EAAD,CAAOC,QAASqB,EAAQpB,MAAOA,EAAOC,SAAUA,IAChD,yCACI4B,GAAIT,EACJE,KAAMA,EACND,KAAMA,EACNG,YAAaA,EACbC,MAAOA,EACPF,SAAUA,EACVrB,MAAOwB,GAAS,CAAEZ,OAAQ,kBACtBN,IACPmB,EACAD,GAAS,yBAAKI,UAAU,QAAQ5B,MAAO,CAAEE,MAAO,QAAUsB,KCnBvE,mC,4XCqEeP,MA/Df,YAAuI,IAAlHC,EAAiH,EAAjHA,OAAQC,EAAyG,EAAzGA,KAAMrB,EAAmG,EAAnGA,MAAmG,IAA5FsB,YAA4F,MAArF,OAAqF,MAA7ErB,gBAA6E,SAA3DsB,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAanB,EAAS,+GAC5HuB,EAAQC,IAAOC,IAAV,KAILC,EAAQF,IAAOG,MAAV,IACDT,GAAS,iBAIbU,EAAWJ,IAAOC,IAAV,KAId,OACI,kBAACG,EAAD,KACI,kBAACtC,EAAA,EAAD,CAAOC,QAASqB,EAAQpB,MAAOA,EAAOC,SAAUA,IAChD,kBAACiC,EAAD,eACIL,GAAIT,EACJE,KAAMA,EACND,KAAMA,EACNG,YAAaA,EACbC,MAAOA,EACPF,SAAUA,GACNf,IACPmB,EACAD,GAAS,kBAACK,EAAD,KAAQL,KChC9B,mC,iDCeeW,MAZf,WAEI,OACI,yBAAK1B,MAAM,KAAKE,OAAO,KAAKyB,MAAM,6BAA6BC,QAAQ,aACnE,uBAAGC,UAAU,gCAAgCC,KAAK,WAC9C,0BAAMC,EAAE,6UACR,4BAAQC,GAAG,SAASC,GAAG,SAASC,EAAE,aCTlD,mC,qECwDe1B,MAnDf,YAAuI,IAAlHC,EAAiH,EAAjHA,OAAQC,EAAyG,EAAzGA,KAAMrB,EAAmG,EAAnGA,MAAmG,IAA5FsB,YAA4F,MAArF,OAAqF,MAA7ErB,gBAA6E,SAA3DsB,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAanB,EAAS,+GAClI,OACI,yBAAKsB,UAAU,aACX,kBAAChC,EAAA,EAAD,CAAOC,QAASqB,EAAQpB,MAAOA,EAAOC,SAAUA,IAChD,yCACI4B,GAAIT,EACJE,KAAMA,EACND,KAAMA,EACNG,YAAaA,EACbC,MAAOA,EACPF,SAAUA,EACVO,UAAWJ,GAAS,iCAChBlB,IACPmB,EACAD,GAAS,yBAAKI,UAAU,oBAAoBJ,KCnBzD,mC,iHCOMoB,E,YACF,WAAYtC,GAAQ,IAAD,8BACf,4CAAMA,KAMVuC,mBAAqB,SAAAC,GACjB,EAAKC,UAAS,SAAAC,GACV,MAAO,CAAEC,cAAeD,EAAUC,iBAElCH,GAAOA,EAAMI,kBATjB,EAAKC,MAAQ,CACTF,cAAc,GAHH,E,sEAcT,IAAD,EAC8GvC,KAAKJ,MAAhHY,EADH,EACGA,OAAQK,EADX,EACWA,MAAOzB,EADlB,EACkBA,MAAO0B,EADzB,EACyBA,MAAOH,EADhC,EACgCA,SAAUC,EAD1C,EAC0CA,YAAa8B,EADvD,EACuDA,UAAWC,EADlE,EACkEA,qBAAsBC,EADxF,EACwFA,QAAYhD,EADpG,wHAEG2C,EAAiBvC,KAAKyC,MAAtBF,aAER,OACI,kBAAChC,EAAA,EAAD,eACIC,OAAQA,EACRpB,MAAOA,EACPwB,YAAaA,EACbF,KAAM6B,EAAe,OAAS,WAC9B5B,SAAUA,EACVE,MAAOA,EACP6B,UAAWA,EACX5B,MAAOA,EACPzB,UAAQ,GACJO,GAEA+C,GACA,uBACIE,KAAK,GACLC,QAAS9C,KAAKmC,mBACd7C,MAAO,CAAEyD,WAAY,IACrB,kBAACtB,EAAA,EAAD,OAIJZ,EAAMmC,OAAS,GAAKJ,GAAW,kBAACnD,EAAA,EAAD,CAAaE,QAASiD,EAAS7C,MAAO,W,GAzC7DK,IAAMC,WAgFlC6B,EAAc5B,aAAe,CACzBoC,UAAW,GACXC,sBAAsB,EACtBvD,MAAO,YAGI8C,QC7Ff,mC,kCCAAe,EAAOC,QAA+B,CAAC,CAAC,KAAO,UAAU,YAAc,eAAe,KAAO,s1BAAq2B,SAAW,CAAC,CAAC,KAAO,iBAAiB,YAAc,GAAG,KAAO,sJAAsJ,CAAC,KAAO,aAAa,YAAc,8CAA8C,MAAQ,CAAC,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qBAAqB,aAAe,CAAC,MAAQ,UAAU,UAAW,KAAS,KAAO,ibAAib,SAAW,CAAC,CAAC,KAAO,oBAAoB,YAAc,iBAAiB,KAAO,2NAA2N,CAAC,KAAO,QAAQ,YAAc,gEAAgE,MAAQ,CAAC,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,gCAAgC,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,cAAc,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,yCAAyC,KAAO,6oBAA6oB,SAAW,CAAC,CAAC,KAAO,uBAAuB,YAAc,iBAAiB,KAAO,qMAAqM,CAAC,KAAO,kBAAkB,YAAc,iBAAiB,KAAO,8MAA8M,CAAC,KAAO,gBAAgB,YAAc,gFAAgF,MAAQ,CAAC,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yFAAyF,KAAO,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,uHAAuH,MAAQ,CAAC,KAAO,CAAC,KAAO,OAAO,UAAW,EAAM,YAAc,kBAAkB,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,cAAc,aAAe,CAAC,MAAQ,aAAa,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,qDAAqD,UAAY,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,+BAA+B,aAAe,CAAC,MAAQ,KAAK,UAAW,IAAQ,YAAc,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qDAAqD,qBAAuB,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,+EAA+E,aAAe,CAAC,MAAQ,QAAQ,UAAW,IAAQ,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,yFAAyF,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,gCAAgC,KAAO,+5FAA+5F,SAAW,CAAC,CAAC,KAAO,qBAAqB,YAAc,uBAAuB,KAAO,0hCAA0hC,CAAC,KAAO,cAAc,YAAc,GAAG,MAAQ,CAAC,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,iCAAiC,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,aAAa,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,aAAa,aAAe,CAAC,MAAQ,IAAI,UAAW,KAAS,KAAO,wnCAAwnC,SAAW,CAAC,CAAC,KAAO,oBAAoB,YAAc,oCAAoC,KAAO,+OAA+O,CAAC,KAAO,mBAAmB,YAAc,aAAa,KAAO,4MAA4M,CAAC,KAAO,mBAAmB,YAAc,aAAa,KAAO,8MAA8M,CAAC,KAAO,mBAAmB,YAAc,8CAA8C,MAAQ,CAAC,oBAAsB,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,+CAA+C,aAAe,CAAC,MAAQ,4BAA8B,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,iCAAiC,kBAAoB,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,0BAA0B,aAAe,CAAC,MAAQ,IAAI,UAAW,KAAS,KAAO,k8GAAo8G,SAAW,CAAC,CAAC,KAAO,cAAc,YAAc,GAAG,KAAO,iUAAiU,CAAC,KAAO,YAAY,YAAc,gIAAgI,MAAQ,CAAC,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yFAAyF,KAAO,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yGAAyG,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,eAAe,KAAO,CAAC,KAAO,CAAC,KAAO,OAAO,MAAQ,CAAC,CAAC,MAAQ,SAAS,UAAW,GAAO,CAAC,MAAQ,WAAW,UAAW,GAAO,CAAC,MAAQ,aAAa,UAAW,KAAS,UAAW,EAAM,YAAc,aAAa,aAAe,CAAC,MAAQ,SAAW,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,0CAA0C,aAAe,CAAC,MAAQ,QAAQ,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,6BAA6B,YAAc,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qCAAqC,MAAQ,CAAC,KAAO,CAAC,KAAO,OAAO,UAAW,EAAM,YAAc,SAAS,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,uCAAuC,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,iDAAiD,KAAO,44DAA44D,SAAW,CAAC,CAAC,KAAO,eAAe,YAAc,8BAA8B,KAAO,mfAAuf,CAAC,KAAO,kBAAkB,YAAc,mBAAmB,KAAO,qaAAua,CAAC,KAAO,eAAe,YAAc,gIAAgI,MAAQ,CAAC,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yFAAyF,KAAO,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yGAAyG,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,eAAe,KAAO,CAAC,KAAO,CAAC,KAAO,OAAO,MAAQ,CAAC,CAAC,MAAQ,SAAS,UAAW,GAAO,CAAC,MAAQ,WAAW,UAAW,GAAO,CAAC,MAAQ,aAAa,UAAW,KAAS,UAAW,EAAM,YAAc,aAAa,aAAe,CAAC,MAAQ,SAAW,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,0CAA0C,aAAe,CAAC,MAAQ,QAAQ,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,6BAA6B,YAAc,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qCAAqC,MAAQ,CAAC,KAAO,CAAC,KAAO,OAAO,UAAW,EAAM,YAAc,SAAS,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,uCAAuC,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,iDAAiD,KAAO,i4DAAi4D,SAAW,CAAC,CAAC,KAAO,eAAe,YAAc,8BAA8B,KAAO,4fAAggB,CAAC,KAAO,kBAAkB,YAAc,mBAAmB,KAAO,8aAAgb,CAAC,KAAO,sBAAsB,YAAc,gIAAgI,MAAQ,CAAC,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yFAAyF,KAAO,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yGAAyG,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,eAAe,KAAO,CAAC,KAAO,CAAC,KAAO,OAAO,MAAQ,CAAC,CAAC,MAAQ,SAAS,UAAW,GAAO,CAAC,MAAQ,WAAW,UAAW,GAAO,CAAC,MAAQ,aAAa,UAAW,KAAS,UAAW,EAAM,YAAc,aAAa,aAAe,CAAC,MAAQ,SAAW,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,0CAA0C,aAAe,CAAC,MAAQ,QAAQ,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,6BAA6B,YAAc,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qCAAqC,MAAQ,CAAC,KAAO,CAAC,KAAO,OAAO,UAAW,EAAM,YAAc,SAAS,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,uCAAuC,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,iDAAiD,KAAO,w5DAAw5D,SAAW,CAAC,CAAC,KAAO,6BAA6B,YAAc,8BAA8B,KAAO,mhBAAuhB,CAAC,KAAO,4BAA4B,YAAc,gIAAgI,MAAQ,CAAC,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yFAAyF,KAAO,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yGAAyG,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,eAAe,KAAO,CAAC,KAAO,CAAC,KAAO,OAAO,MAAQ,CAAC,CAAC,MAAQ,SAAS,UAAW,GAAO,CAAC,MAAQ,WAAW,UAAW,GAAO,CAAC,MAAQ,aAAa,UAAW,KAAS,UAAW,EAAM,YAAc,aAAa,aAAe,CAAC,MAAQ,SAAW,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,0CAA0C,aAAe,CAAC,MAAQ,QAAQ,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,6BAA6B,YAAc,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qCAAqC,MAAQ,CAAC,KAAO,CAAC,KAAO,OAAO,UAAW,EAAM,YAAc,SAAS,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,uCAAuC,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,iDAAiD,KAAO,8hEAA8hE,SAAW,CAAC,CAAC,KAAO,eAAe,YAAc,8BAA8B,KAAO,miBAAuiB,CAAC,KAAO,kBAAkB,YAAc,mBAAmB,KAAO,ud,iCCAlxhC,2EAGe,SAASC,IACpB,OAAO,kBAAC,IAAD,Q,6BCJX,0EAIe,SAASC,IACpB,OAAO,kBAAC,IAAD,CAAOjE,QAAQ,OAAOC,MAAM,W,6BCLvC,0EAIe,SAASiE,IACpB,OAAO,kBAAC,IAAD,CAAOlE,QAAQ,OAAOC,MAAM,OAAOC,UAAQ,M,mGCDhDiE,E,YACF,WAAY1D,GAAQ,IAAD,8BACf,4CAAMA,KAED6C,MAAQ,CACTc,SAAU,IAJC,E,0EASf,IAAMP,EAAShD,KAAKyC,MAAMc,SAASP,OACnC,OAAOA,EAAS,GAAK,IAAe,GAATA,I,+BAGrB,IAAD,OACL,OACI,6BACI,kBAAC,IAAD,eACIxC,OAAO,sCACPC,KAAK,WACLE,SAAU,SAAAyB,GAAK,OAAI,EAAKC,SAAS,CAAEkB,SAAUnB,EAAMoB,OAAO3C,SAC1DA,MAAOb,KAAKyC,MAAMc,SAClBE,UAAW,EACX7C,YAAY,iBACZ+B,sBAAoB,EACpBC,QAAS5C,KAAK0D,cACV1D,KAAKJ,a,GA1BIQ,IAAMC,WAgCxBiD,a,6BCpCf,0EAIe,SAASK,IACpB,OAAO,kBAAC,IAAD,CAAahE,QAAS,GAAII,MAAO,IAAKE,OAAQ,O,6BCLzD,0EAIe,SAAS0D,IACpB,OAAO,kBAAC,IAAD,CAAahE,QAAS,GAAII,MAAO,Q,6BCL5C,0EAIe,SAAS4D,IACpB,OAAO,kBAAC,IAAD,CAAahE,QAAS,GAAII,MAAO,Q,0ICDvB6D,E,iLAEb,OACI,kBAAC,IAAD,CACIpD,OAAO,gBACPpB,MAAM,aACNqB,KAAK,YACLE,SAAU,aACVtB,UAAQ,EACRyB,MAAM,gC,GAToBV,IAAMC,Y,0ICA3B+C,E,iLAEb,OACI,kBAAC,IAAD,CACI5C,OAAO,mBACPpB,MAAM,aACNqB,KAAK,YACLE,SAAU,mB,GAPmBP,IAAMC,Y,2ICA9BuD,E,iLAEb,OACI,kBAAC,IAAD,CACIpD,OAAO,gBACPpB,MAAM,aACNqB,KAAK,YACLE,SAAU,aACVtB,UAAQ,EACRyB,MAAM,gC,GAToBV,IAAMC,Y,2ICA3B+C,E,iLAEb,OACI,kBAAC,IAAD,CACI5C,OAAO,mBACPpB,MAAM,aACNqB,KAAK,YACLE,SAAU,mB,GAPmBP,IAAMC,Y,2ICA9BuD,E,iLAEb,OACI,kBAAC,IAAD,CACIpD,OAAO,gBACPpB,MAAM,aACNqB,KAAK,YACLE,SAAU,aACVtB,UAAQ,EACRyB,MAAM,gC,GAToBV,IAAMC,Y,2ICA3B+C,E,iLAEb,OACI,kBAAC,IAAD,CACI5C,OAAO,mBACPpB,MAAM,aACNqB,KAAK,YACLE,SAAU,mB,GAPmBP,IAAMC,Y,0GCE7CwD,E,YACF,WAAYjE,GAAQ,IAAD,8BACf,4CAAMA,KAYVe,SAAW,SAACyB,GACR,IAAM0B,EAAO,EAAKrB,MAAMqB,KACxBA,EAAK1B,EAAMoB,OAAO/C,MAAQ2B,EAAMoB,OAAO3C,MACvC,EAAKwB,SAAS,CAAEyB,UAhBD,EAyCnBC,SAAW,WAAO,IACND,EAAS,EAAKrB,MAAdqB,KACY,EAAKE,SAASF,KAE9B,EAAKlE,MAAMmE,SAASD,GACpB,EAAKzB,SAAS,CAAE4B,WAAW,MA3C/B,EAAKxB,MAAQ,CACTqB,KAAM,CACFI,MAAO,GACPX,SAAU,IAEdY,OAAQ,GACRF,WAAW,GATA,E,6EAsBHV,GACZ,OAAKA,EACDA,EAASP,QAAUhD,KAAKJ,MAAMwE,kBAA0B,IACjCtE,SAASyD,EAASP,OAAShD,KAAKJ,MAAMwE,kBAAoB,IAAK,IAFpE,O,kCAMK,IAApBF,EAAmB,EAAnBA,MAAOX,EAAY,EAAZA,SACRY,EAAS,GACPC,EAAsBpE,KAAKJ,MAA3BwE,kBAOR,OALKF,IAAOC,EAAOD,MAAQ,mBACvBX,EAASP,OAASoB,IAAmBD,EAAOZ,SAAP,oCAA+Ca,EAA/C,iBAEzCpE,KAAKqC,SAAS,CAAE8B,WACkD,IAA9CE,OAAOC,oBAAoBH,GAAQnB,S,+BAajD,IAAD,EACyBhD,KAAKyC,MAA3B0B,EADH,EACGA,OAAQF,EADX,EACWA,UADX,EAEuBjE,KAAKyC,MAAMqB,KAA/BI,EAFH,EAEGA,MAAOX,EAFV,EAEUA,SAEf,OACIU,EACI,4BAAKjE,KAAKJ,MAAM2E,qBAChB,6BACI,kBAAChE,EAAA,EAAD,CACIC,OAAO,0BACPC,KAAK,QACLE,SAAUX,KAAKW,SACfvB,MAAM,QACNyB,MAAOqD,EACPpD,MAAOqD,EAAOD,MACd7E,UAAQ,IAEZ,kBAAC6C,EAAA,EAAD,CACI1B,OAAO,6BACPC,KAAK,WACLI,MAAO0C,EACP5C,SAAUX,KAAKW,SACfiC,QAAS5C,KAAKwE,gBAAgBjB,GAC9BZ,sBAAoB,EACpBD,UAAW,GACX5B,MAAOqD,EAAOZ,WAElB,2BAAO7C,KAAK,SAASG,MAAM,WAAWiC,QAAS9C,KAAK+D,gB,GA9EzC3D,IAAMC,WA+FrCwD,EAAiBvD,aAAe,CAC5BiE,oBAAqB,0BACrBH,kBAAmB,GAGRP,Q,4CCvGMY,E,2MACjBV,SAAW,SAACD,GACRY,QAAQC,IAAIb,I,wEAIZ,OAAO,kBAAC,EAAD,CAAkBC,SAAU/D,KAAK+D,e,GANK3D,IAAMC,Y,wDCCrDuE,EAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClB,OACI,6BACI,qCAAWA,KAUvBD,EAAWtE,aAAe,CACtBuE,QAAS,SAGED,QCjBA,SAASE,IACpB,OAAO,kBAAC,EAAD,CAAYD,QAAQ,2BAL/B,yC,0HCyDetE,MAnDf,YAAuI,IAAlHC,EAAiH,EAAjHA,OAAQC,EAAyG,EAAzGA,KAAMrB,EAAmG,EAAnGA,MAAmG,IAA5FsB,YAA4F,MAArF,OAAqF,MAA7ErB,gBAA6E,SAA3DsB,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAanB,EAAS,+GAClI,OACI,yBAAKsB,UAAW6D,IAAOC,UACnB,kBAAC9F,EAAA,EAAD,CAAOC,QAASqB,EAAQpB,MAAOA,EAAOC,SAAUA,IAChD,yCACI4B,GAAIT,EACJE,KAAMA,EACND,KAAMA,EACNG,YAAaA,EACbC,MAAOA,EACPF,SAAUA,EACVO,UAAWJ,GAASiE,IAAOE,YACvBrF,IACPmB,EACAD,GAAS,yBAAKI,UAAW6D,IAAOjE,OAAQA,K,4CChBhC8C,E,iLAEb,OACI,kBAACsB,EAAD,CACI1E,OAAO,gBACPpB,MAAM,aACNqB,KAAK,YACLE,SAAU,aACVtB,UAAQ,EACRyB,MAAM,gC,GAToBV,IAAMC,Y,2DCJhD,IAAI8E,EAAM,CACT,2BAA4B,GAC5B,8BAA+B,GAC/B,iCAAkC,GAClC,oCAAqC,GACrC,+BAAgC,GAChC,kCAAmC,GACnC,0BAA2B,GAC3B,6BAA8B,GAC9B,qCAAsC,GACtC,wCAAyC,GACzC,kCAAmC,GACnC,qCAAsC,GACtC,iCAAkC,GAClC,oCAAqC,GACrC,iCAAkC,GAClC,oCAAqC,GACrC,iCAAkC,GAClC,oCAAqC,GACrC,2BAA4B,GAC5B,8BAA+B,GAC/B,8BAA+B,GAC/B,iCAAkC,GAClC,8BAA+B,GAC/B,iCAAkC,GAClC,iCAAkC,GAClC,oCAAqC,GACrC,mDAAoD,GACpD,sDAAuD,GACvD,2CAA4C,GAC5C,8CAA+C,GAC/C,8CAA+C,GAC/C,iDAAkD,IAInD,SAASC,EAAeC,GACvB,IAAIpE,EAAKqE,EAAsBD,GAC/B,OAAOE,EAAoBtE,GAE5B,SAASqE,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEL,EAAKE,GAAM,CACpC,IAAII,EAAI,IAAItE,MAAM,uBAAyBkE,EAAM,KAEjD,MADAI,EAAEC,KAAO,mBACHD,EAEP,OAAON,EAAIE,GAEZD,EAAeO,KAAO,WACrB,OAAOtB,OAAOsB,KAAKR,IAEpBC,EAAeQ,QAAUN,EACzBrC,EAAOC,QAAUkC,EACjBA,EAAenE,GAAK,I,kJC9BL4E,EApBI,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAClB,OACI,wBAAI5E,UAAU,cAEN4E,EAAWX,KAAI,SAAA1E,GACX,OACI,wBAAIsF,IAAKtF,GACL,uBAAGoC,KAAI,WAAMpC,IAASA,S,kCCmBnCuF,E,4LAnBPC,IAAKC,iBAAiB,aAAcC,KACpCF,IAAKG,eAAepG,KAAKqG,W,+BAGnB,IAAD,OACL,OACI,yBAAKC,IAAK,SAAAA,GAAS,EAAKD,QAAUC,IAC9B,8BACKtG,KAAKJ,MAAMmB,e,GAVNX,IAAMC,WCqCjBkG,E,YAxCX,WAAY3G,GAAQ,IAAD,8BACf,4CAAMA,KAIV4G,WAAa,SAAApE,GACTA,EAAMI,iBACN,EAAKH,UAAS,SAAAC,GACV,MAAO,CAAEmE,UAAWnE,EAAUmE,cANlC,EAAKhE,MAAQ,CAAEgE,UAAU,GAFV,E,sEAYT,IACEA,EAAazG,KAAKyC,MAAlBgE,SADH,EAE+BzG,KAAKJ,MAAM8G,QAAvChB,EAFH,EAEGA,KAAMiB,EAFT,EAESA,YAAalG,EAFtB,EAEsBA,KAErBmG,EAAmBC,MAAQ,YAAc7G,KAAKJ,MAAMkH,cAA1B,YAA2CrG,IAAQsG,QACnF,OACI,yBAAK7F,UAAU,WACVyF,GAAe,4BAAKA,GAErB,kBAACC,EAAD,MAEA,2BACI,uBAAG/D,KAAK,GAAGC,QAAS9C,KAAKwG,YACpBC,EAAW,OAAS,OADzB,UAKHA,GAAY,kBAAC,EAAD,KAAcf,Q,GA9BrBtF,IAAMC,WCoCb2G,EArCD,SAAC,GAAe,IAAbpH,EAAY,EAAZA,MAGb,OAFA8E,QAAQC,IAAI/E,GAGR,2BAAOsB,UAAU,SACb,+BACI,4BACI,oCACA,2CACA,oCACA,uCACA,0CAGR,+BAEQmD,OAAOsB,KAAK/F,GAAOuF,KAAI,SAAAY,GACnB,OACI,wBAAIA,IAAKA,GACL,4BAAKA,GACL,4BAAKnG,EAAMmG,GAAKY,aAChB,4BAAK/G,EAAMmG,GAAKtF,MAChB,4BAAKb,EAAMmG,GAAKkB,cAAgBrH,EAAMmG,GAAKkB,aAAapG,OACxD,4BAAKjB,EAAMmG,GAAK1G,UAAY,YCQ7C6H,EA7BO,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACb1G,EAAuC0G,EAAvC1G,KAAMkG,EAAiCQ,EAAjCR,YAAa/G,EAAoBuH,EAApBvH,MAAOwH,EAAaD,EAAbC,SAElC,OACI,yBAAKlG,UAAU,iBACX,4BAAKT,GACL,2BAAIkG,GAEJ,sCAAYS,EAASpE,OAAS,GAAK,KAE/BoE,EAASpE,OAAS,EACdoE,EAASjC,KAAI,SAAAuB,GAAO,OAAI,kBAAC,EAAD,CAASX,IAAKW,EAAQhB,KAAMgB,QAASA,EAASI,cAAerG,OACrF,qBAGR,qCAEIb,EACI,kBAAC,EAAD,CAAOA,MAAOA,IACd,qC,iBCnBCyH,E,YACjB,WAAYzH,GAAQ,IAAD,8BACf,4CAAMA,KACD6C,MAAQ,CACT6E,MAAOC,OAAOC,SAASC,KAAKC,OAAO,IAHxB,E,iFAOE,IAAD,OAChBH,OAAOI,iBAAiB,cAAc,WAClC,EAAKtF,SAAS,CAAEiF,MAAOC,OAAOC,SAASC,KAAKC,OAAO,U,+BAIjD,IACEJ,EAAUtH,KAAKyC,MAAf6E,MACFH,EAAYG,EAAQM,IAAcC,QAAO,SAAAV,GAAS,OAAIA,EAAU1G,OAAS6G,KAAO,GAAKM,IAAc,GAEzG,OACI,6BACI,kBAAC,EAAD,CAAY9B,WAAY8B,IAAczC,KAAI,SAAAgC,GAAS,OAAIA,EAAU1G,UACjE,kBAAC,EAAD,CAAe0G,UAAWA,S,GArBR/G,IAAMC,W,MCAxCyH,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.b3726845.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({ htmlFor, label, required }) {\n    return (\n        <label style={{ display: 'block' }} htmlFor={htmlFor}>\n            {label} {required && <span style={{ color: 'red' }}> *</span>}\n        </label>\n    )\n}\n\nLabel.propTypes = {\n    /** HTML ID for associated input */\n    htmlFor: PropTypes.string.isRequired,\n\n    /** Label text */\n    label: PropTypes.string.isRequired,\n\n    /** Display asterisk after label if true */\n    required: PropTypes.bool\n};\n\nexport default Label;\n","export { default } from './Label';\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n    getColor = (percent) => {\n        if (this.props.percent === 100) return 'green';\n        return this.props.percent > 50 ? 'lightgreen' : 'red';\n    }\n\n    getWidthAsPercentOfTotalWidth = () => {\n        return parseInt(this.props.width * (this.props.percent / 100), 10);\n    }\n\n    render() {\n        const { percent, width, height } = this.props;\n        return (\n            <div style={{ border: 'solid 1px lightgray', width: width }}>\n                <div style={{\n                    width: this.getWidthAsPercentOfTotalWidth(),\n                    height,\n                    backgroundColor: this.getColor(percent)\n                }} />\n            </div>\n        );\n    }\n}\n\nProgressBar.propTypes = {\n    /** Percent of progress completed */\n    percent: PropTypes.number.isRequired,\n\n    /** Bar width */\n    width: PropTypes.number.isRequired,\n\n    /** Bar height */\n    height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n    height: 5\n};\n\nexport default ProgressBar;\n","export { default } from './ProgressBar';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({ htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props }) {\n    return (\n        <div style={{ marginBottom: 16 }}>\n            <Label htmlFor={htmlId} label={label} required={required} />\n            <input\n                id={htmlId}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n                style={error && { border: 'solid 1px red' }}\n                {...props} />\n            {children}\n            {error && <div className=\"error\" style={{ color: 'red' }}>{error}</div>}\n        </div>\n    );\n};\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n\n    /** Input label */\n    label: PropTypes.string.isRequired,\n\n    /** Input type */\n    type: PropTypes.oneOf(['text', 'number', 'password']),\n\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n\n    /** Value */\n    value: PropTypes.any,\n\n    /** String to display when error occurs */\n    error: PropTypes.string,\n\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;\n","export { default } from './TextInput'\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styled from 'styled-components';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({ htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props }) {\n    const Error = styled.div`\n    color: red;\n  `\n\n    const Input = styled.input`\n    border: ${error && 'solid 1px red'};\n    display: block;\n  `;\n\n    const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n\n    return (\n        <Fieldset>\n            <Label htmlFor={htmlId} label={label} required={required} />\n            <Input\n                id={htmlId}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n                {...props} />\n            {children}\n            {error && <Error>{error}</Error>}\n        </Fieldset>\n    );\n};\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n\n    /** Input label */\n    label: PropTypes.string.isRequired,\n\n    /** Input type */\n    type: PropTypes.oneOf(['text', 'number', 'password']),\n\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n\n    /** Value */\n    value: PropTypes.any,\n\n    /** String to display when error occurs */\n    error: PropTypes.string,\n\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;\n","export {default} from './TextInputStyledComponents'","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n    // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n    return (\n        <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n            <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n                <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n                <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n            </g>\n        </svg>\n    )\n}\n\nexport default EyeIcon;\n","export { default } from './EyeIcon'\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({ htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props }) {\n    return (\n        <div className=\"textinput\">\n            <Label htmlFor={htmlId} label={label} required={required} />\n            <input\n                id={htmlId}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n                className={error && 'textinput__input--state-error'}\n                {...props} />\n            {children}\n            {error && <div className=\"textinput__error\">{error}</div>}\n        </div>\n    );\n};\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n\n    /** Input label */\n    label: PropTypes.string.isRequired,\n\n    /** Input type */\n    type: PropTypes.oneOf(['text', 'number', 'password']),\n\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n\n    /** Value */\n    value: PropTypes.any,\n\n    /** String to display when error occurs */\n    error: PropTypes.string,\n\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;\n","import './textinput.css'\nexport { default } from './TextInputBEM'\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showPassword: false\n        }\n    }\n\n    toggleShowPassword = event => {\n        this.setState(prevState => {\n            return { showPassword: !prevState.showPassword };\n        });\n        if (event) event.preventDefault();\n    }\n\n    render() {\n        const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n        const { showPassword } = this.state;\n\n        return (\n            <TextInput\n                htmlId={htmlId}\n                label={label}\n                placeholder={placeholder}\n                type={showPassword ? 'text' : 'password'}\n                onChange={onChange}\n                value={value}\n                maxLength={maxLength}\n                error={error}\n                required\n                {...props}>\n                {\n                    showVisibilityToggle &&\n                    <a\n                        href=\"\"\n                        onClick={this.toggleShowPassword}\n                        style={{ marginLeft: 5 }}>\n                        <EyeIcon />\n                    </a>\n                }\n                {\n                    value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n                }\n            </TextInput>\n        );\n    }\n}\n\nPasswordInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n    name: PropTypes.string.isRequired,\n\n    /** Password value */\n    value: PropTypes.any,\n\n    /** Input label */\n    label: PropTypes.string,\n\n    /** Function called when password input value changes */\n    onChange: PropTypes.func.isRequired,\n\n    /** Max password length accepted */\n    maxLength: PropTypes.number,\n\n    /** Placeholder displayed when no password is entered */\n    placeholder: PropTypes.string,\n\n    /** Set to true to show the toggle for displaying the currently entered password */\n    showVisibilityToggle: PropTypes.bool,\n\n    /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n    quality: PropTypes.number,\n\n    /** Validation error to display */\n    error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n    maxLength: 50,\n    showVisibilityToggle: false,\n    label: 'Password'\n};\n\nexport default PasswordInput;\n","export { default } from './PasswordInput'\n","module.exports = /* eslint-disable */ [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from 'react';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n    // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n    return (\\n        <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n            <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n                <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n                <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n            </g>\\n        </svg>\\n    )\\n}\\n\\nexport default EyeIcon;\\n\",\"examples\":[{\"name\":\"ExampleEyeIcon\",\"description\":\"\",\"code\":\"import React from 'react';\\nimport EyeIcon from 'kar-react/EyeIcon';\\n\\nexport default function EyeIconExample() {\\n    return <EyeIcon />;\\n}\\n\"}]},{\"name\":\"HelloWorld\",\"description\":\"A super lame component that displays hellow\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"'World'\",\"computed\":false}}},\"code\":\"import React from 'react'\\nimport PropTypes from 'prop-types'\\n\\n/**  A super lame component that displays hellow*/\\nconst HelloWorld = ({ message }) => {\\n    return (\\n        <div>\\n            <h1>Hello {message}</h1>\\n        </div>\\n    )\\n}\\n\\nHelloWorld.propTypes = {\\n    /** Message to display */\\n    message: PropTypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n    message: 'World'\\n};\\n\\nexport default HelloWorld;\\n\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Custom message\",\"code\":\"import React from 'react';\\nimport HelloWorld from 'kar-react/HelloWorld';\\n\\n/** Custom message */\\nexport default function ExampleHelloWorld() {\\n    return <HelloWorld message=\\\"Karthick Ragavendran!!\\\" />\\n}\\n\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor, and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({ htmlFor, label, required }) {\\n    return (\\n        <label style={{ display: 'block' }} htmlFor={htmlFor}>\\n            {label} {required && <span style={{ color: 'red' }}> *</span>}\\n        </label>\\n    )\\n}\\n\\nLabel.propTypes = {\\n    /** HTML ID for associated input */\\n    htmlFor: PropTypes.string.isRequired,\\n\\n    /** Label text */\\n    label: PropTypes.string.isRequired,\\n\\n    /** Display asterisk after label if true */\\n    required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\"examples\":[{\"name\":\"ExampleLabelOptional\",\"description\":\"Optional label\",\"code\":\"import React from 'react';\\nimport Label from 'kar-react/Label';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n    return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\n}\\n\"},{\"name\":\"ExampleRequired\",\"description\":\"Required label\",\"code\":\"import React from 'react';\\nimport Label from 'kar-react/Label';\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n    return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\n}\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            showPassword: false\\n        }\\n    }\\n\\n    toggleShowPassword = event => {\\n        this.setState(prevState => {\\n            return { showPassword: !prevState.showPassword };\\n        });\\n        if (event) event.preventDefault();\\n    }\\n\\n    render() {\\n        const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n        const { showPassword } = this.state;\\n\\n        return (\\n            <TextInput\\n                htmlId={htmlId}\\n                label={label}\\n                placeholder={placeholder}\\n                type={showPassword ? 'text' : 'password'}\\n                onChange={onChange}\\n                value={value}\\n                maxLength={maxLength}\\n                error={error}\\n                required\\n                {...props}>\\n                {\\n                    showVisibilityToggle &&\\n                    <a\\n                        href=\\\"\\\"\\n                        onClick={this.toggleShowPassword}\\n                        style={{ marginLeft: 5 }}>\\n                        <EyeIcon />\\n                    </a>\\n                }\\n                {\\n                    value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n                }\\n            </TextInput>\\n        );\\n    }\\n}\\n\\nPasswordInput.propTypes = {\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n    htmlId: PropTypes.string.isRequired,\\n\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n    name: PropTypes.string.isRequired,\\n\\n    /** Password value */\\n    value: PropTypes.any,\\n\\n    /** Input label */\\n    label: PropTypes.string,\\n\\n    /** Function called when password input value changes */\\n    onChange: PropTypes.func.isRequired,\\n\\n    /** Max password length accepted */\\n    maxLength: PropTypes.number,\\n\\n    /** Placeholder displayed when no password is entered */\\n    placeholder: PropTypes.string,\\n\\n    /** Set to true to show the toggle for displaying the currently entered password */\\n    showVisibilityToggle: PropTypes.bool,\\n\\n    /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n    quality: PropTypes.number,\\n\\n    /** Validation error to display */\\n    error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n    maxLength: 50,\\n    showVisibilityToggle: false,\\n    label: 'Password'\\n};\\n\\nexport default PasswordInput;\\n\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"All features enabled\",\"code\":\"import React from 'react';\\nimport PasswordInput from 'kar-react/PasswordInput';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            password: ''\\n        };\\n    }\\n\\n    getQuality() {\\n        const length = this.state.password.length;\\n        return length > 10 ? 100 : length * 10;\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <PasswordInput\\n                    htmlId=\\\"password-input-example-all-features\\\"\\n                    name=\\\"password\\\"\\n                    onChange={event => this.setState({ password: event.target.value })}\\n                    value={this.state.password}\\n                    minLength={8}\\n                    placeholder=\\\"Enter password\\\"\\n                    showVisibilityToggle\\n                    quality={this.getQuality()}\\n                    {...this.props} />\\n            </div>\\n        )\\n    }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nclass ProgressBar extends React.Component {\\n    getColor = (percent) => {\\n        if (this.props.percent === 100) return 'green';\\n        return this.props.percent > 50 ? 'lightgreen' : 'red';\\n    }\\n\\n    getWidthAsPercentOfTotalWidth = () => {\\n        return parseInt(this.props.width * (this.props.percent / 100), 10);\\n    }\\n\\n    render() {\\n        const { percent, width, height } = this.props;\\n        return (\\n            <div style={{ border: 'solid 1px lightgray', width: width }}>\\n                <div style={{\\n                    width: this.getWidthAsPercentOfTotalWidth(),\\n                    height,\\n                    backgroundColor: this.getColor(percent)\\n                }} />\\n            </div>\\n        );\\n    }\\n}\\n\\nProgressBar.propTypes = {\\n    /** Percent of progress completed */\\n    percent: PropTypes.number.isRequired,\\n\\n    /** Bar width */\\n    width: PropTypes.number.isRequired,\\n\\n    /** Bar height */\\n    height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n    height: 5\\n};\\n\\nexport default ProgressBar;\\n\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100 Percent and width height 20px\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'kar-react/ProgressBar'\\n\\n/** 100 Percent and width height 20px */\\nexport default function Example10Percent() {\\n    return <ProgressBar percent={30} width={200} height={20} />\\n}\\n\"},{\"name\":\"Example10Percent\",\"description\":\"10 Percent\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'kar-react/ProgressBar'\\n\\n/** 10 Percent */\\nexport default function Example10Percent() {\\n    return <ProgressBar percent={10} width={200} />\\n}\\n\"},{\"name\":\"Example65Percent\",\"description\":\"65 Percent\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'kar-react/ProgressBar'\\n\\n/** 65 Percent */\\nexport default function Example10Percent() {\\n    return <ProgressBar percent={65} width={200} />\\n}\\n\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation.\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"\\\"Thanks for registering!\\\"\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            user: {\\n                email: '',\\n                password: ''\\n            },\\n            errors: {},\\n            submitted: false,\\n        };\\n    }\\n\\n    onChange = (event) => {\\n        const user = this.state.user;\\n        user[event.target.name] = event.target.value;\\n        this.setState({ user });\\n    }\\n\\n    // Returns a number from 0 to 100 that represents password quality.\\n    // For simplicity, just returning % of min length entered.\\n    // Could enhance with checks for number, special char, unique characters, etc.\\n    passwordQuality(password) {\\n        if (!password) return null;\\n        if (password.length >= this.props.minPasswordLength) return 100;\\n        const percentOfMinLength = parseInt(password.length / this.props.minPasswordLength * 100, 10);\\n        return percentOfMinLength;\\n    }\\n\\n    validate({ email, password }) {\\n        const errors = {};\\n        const { minPasswordLength } = this.props;\\n\\n        if (!email) errors.email = 'Email required.';\\n        if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n        this.setState({ errors });\\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n        return formIsValid;\\n    }\\n\\n    onSubmit = () => {\\n        const { user } = this.state;\\n        const formIsValid = this.validate(user);\\n        if (formIsValid) {\\n            this.props.onSubmit(user);\\n            this.setState({ submitted: true });\\n        }\\n    }\\n\\n    render() {\\n        const { errors, submitted } = this.state;\\n        const { email, password } = this.state.user;\\n\\n        return (\\n            submitted ?\\n                <h2>{this.props.confirmationMessage}</h2> :\\n                <div>\\n                    <TextInput\\n                        htmlId=\\\"registration-form-email\\\"\\n                        name=\\\"email\\\"\\n                        onChange={this.onChange}\\n                        label=\\\"Email\\\"\\n                        value={email}\\n                        error={errors.email}\\n                        required />\\n\\n                    <PasswordInput\\n                        htmlId=\\\"registration-form-password\\\"\\n                        name=\\\"password\\\"\\n                        value={password}\\n                        onChange={this.onChange}\\n                        quality={this.passwordQuality(password)}\\n                        showVisibilityToggle\\n                        maxLength={50}\\n                        error={errors.password} />\\n\\n                    <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n                </div>\\n        )\\n    }\\n}\\n\\nRegistrationForm.propTypes = {\\n    /** Message displayed upon successful submission */\\n    confirmationMessage: PropTypes.string,\\n\\n    /** Called when form is submitted */\\n    onSubmit: PropTypes.func.isRequired,\\n\\n    /** Minimum password length */\\n    minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n    confirmationMessage: \\\"Thanks for registering!\\\",\\n    minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n\",\"examples\":[{\"name\":\"ExampleForm\",\"description\":\"\",\"code\":\"import React from 'react';\\nimport RegistrationForm from 'kar-react/RegistrationForm';\\n\\nexport default class ExampleRegistrationForm extends React.Component {\\n    onSubmit = (user) => {\\n        console.log(user);\\n    }\\n\\n    render() {\\n        return <RegistrationForm onSubmit={this.onSubmit} />\\n    }\\n}\\n\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({ htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props }) {\\n    return (\\n        <div style={{ marginBottom: 16 }}>\\n            <Label htmlFor={htmlId} label={label} required={required} />\\n            <input\\n                id={htmlId}\\n                type={type}\\n                name={name}\\n                placeholder={placeholder}\\n                value={value}\\n                onChange={onChange}\\n                style={error && { border: 'solid 1px red' }}\\n                {...props} />\\n            {children}\\n            {error && <div className=\\\"error\\\" style={{ color: 'red' }}>{error}</div>}\\n        </div>\\n    );\\n};\\n\\nTextInput.propTypes = {\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n    htmlId: PropTypes.string.isRequired,\\n\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n    name: PropTypes.string.isRequired,\\n\\n    /** Input label */\\n    label: PropTypes.string.isRequired,\\n\\n    /** Input type */\\n    type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n    /** Mark label with asterisk if set to true */\\n    required: PropTypes.bool,\\n\\n    /** Function to call onChange */\\n    onChange: PropTypes.func.isRequired,\\n\\n    /** Placeholder to display when empty */\\n    placeholder: PropTypes.string,\\n\\n    /** Value */\\n    value: PropTypes.any,\\n\\n    /** String to display when error occurs */\\n    error: PropTypes.string,\\n\\n    /** Child component to display next to the input */\\n    children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInput from 'kar-react/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n    render() {\\n        return (\\n            <TextInput\\n                htmlId=\\\"example-error\\\"\\n                label=\\\"First Name\\\"\\n                name=\\\"firstname\\\"\\n                onChange={() => { }}\\n                required\\n                error=\\\"First name is required.\\\"\\n            />\\n        )\\n    }\\n}\\n\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React from 'react';\\nimport TextInput from 'kar-react/TextInput';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n    render() {\\n        return (\\n            <TextInput\\n                htmlId=\\\"example-optional\\\"\\n                label=\\\"First Name\\\"\\n                name=\\\"firstname\\\"\\n                onChange={() => { }}\\n            />\\n        )\\n    }\\n}\\n\"}]},{\"name\":\"TextInputBEM\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({ htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props }) {\\n    return (\\n        <div className=\\\"textinput\\\">\\n            <Label htmlFor={htmlId} label={label} required={required} />\\n            <input\\n                id={htmlId}\\n                type={type}\\n                name={name}\\n                placeholder={placeholder}\\n                value={value}\\n                onChange={onChange}\\n                className={error && 'textinput__input--state-error'}\\n                {...props} />\\n            {children}\\n            {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n        </div>\\n    );\\n};\\n\\nTextInput.propTypes = {\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n    htmlId: PropTypes.string.isRequired,\\n\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n    name: PropTypes.string.isRequired,\\n\\n    /** Input label */\\n    label: PropTypes.string.isRequired,\\n\\n    /** Input type */\\n    type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n    /** Mark label with asterisk if set to true */\\n    required: PropTypes.bool,\\n\\n    /** Function to call onChange */\\n    onChange: PropTypes.func.isRequired,\\n\\n    /** Placeholder to display when empty */\\n    placeholder: PropTypes.string,\\n\\n    /** Value */\\n    value: PropTypes.any,\\n\\n    /** String to display when error occurs */\\n    error: PropTypes.string,\\n\\n    /** Child component to display next to the input */\\n    children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInputBEM from 'kar-react/TextInputBEM';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n    render() {\\n        return (\\n            <TextInputBEM\\n                htmlId=\\\"example-error\\\"\\n                label=\\\"First Name\\\"\\n                name=\\\"firstname\\\"\\n                onChange={() => { }}\\n                required\\n                error=\\\"First name is required.\\\"\\n            />\\n        )\\n    }\\n}\\n\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React from 'react';\\nimport TextInputBEM from 'kar-react/TextInputBEM';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n    render() {\\n        return (\\n            <TextInputBEM\\n                htmlId=\\\"example-optional\\\"\\n                label=\\\"First Name\\\"\\n                name=\\\"firstname\\\"\\n                onChange={() => { }}\\n            />\\n        )\\n    }\\n}\\n\"}]},{\"name\":\"TextInputCSSModules\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styles from './textInput.css';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({ htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props }) {\\n    return (\\n        <div className={styles.fieldset}>\\n            <Label htmlFor={htmlId} label={label} required={required} />\\n            <input\\n                id={htmlId}\\n                type={type}\\n                name={name}\\n                placeholder={placeholder}\\n                value={value}\\n                onChange={onChange}\\n                className={error && styles.inputError}\\n                {...props} />\\n            {children}\\n            {error && <div className={styles.error}>{error}</div>}\\n        </div>\\n    );\\n};\\n\\nTextInput.propTypes = {\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n    htmlId: PropTypes.string.isRequired,\\n\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n    name: PropTypes.string.isRequired,\\n\\n    /** Input label */\\n    label: PropTypes.string.isRequired,\\n\\n    /** Input type */\\n    type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n    /** Mark label with asterisk if set to true */\\n    required: PropTypes.bool,\\n\\n    /** Function to call onChange */\\n    onChange: PropTypes.func.isRequired,\\n\\n    /** Placeholder to display when empty */\\n    placeholder: PropTypes.string,\\n\\n    /** Value */\\n    value: PropTypes.any,\\n\\n    /** String to display when error occurs */\\n    error: PropTypes.string,\\n\\n    /** Child component to display next to the input */\\n    children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\"examples\":[{\"name\":\"ExampleTextInputCSSExample\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInputCSSModules from 'kar-react/TextInputCSSModules';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n    render() {\\n        return (\\n            <TextInputCSSModules\\n                htmlId=\\\"example-error\\\"\\n                label=\\\"First Name\\\"\\n                name=\\\"firstname\\\"\\n                onChange={() => { }}\\n                required\\n                error=\\\"First name is required.\\\"\\n            />\\n        )\\n    }\\n}\\n\"}]},{\"name\":\"TextInputStyledComponents\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styled from 'styled-components';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({ htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props }) {\\n    const Error = styled.div`\\n    color: red;\\n  `\\n\\n    const Input = styled.input`\\n    border: ${error && 'solid 1px red'};\\n    display: block;\\n  `;\\n\\n    const Fieldset = styled.div`\\n    margin-bottom: 16px;\\n  `;\\n\\n    return (\\n        <Fieldset>\\n            <Label htmlFor={htmlId} label={label} required={required} />\\n            <Input\\n                id={htmlId}\\n                type={type}\\n                name={name}\\n                placeholder={placeholder}\\n                value={value}\\n                onChange={onChange}\\n                {...props} />\\n            {children}\\n            {error && <Error>{error}</Error>}\\n        </Fieldset>\\n    );\\n};\\n\\nTextInput.propTypes = {\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n    htmlId: PropTypes.string.isRequired,\\n\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n    name: PropTypes.string.isRequired,\\n\\n    /** Input label */\\n    label: PropTypes.string.isRequired,\\n\\n    /** Input type */\\n    type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n    /** Mark label with asterisk if set to true */\\n    required: PropTypes.bool,\\n\\n    /** Function to call onChange */\\n    onChange: PropTypes.func.isRequired,\\n\\n    /** Placeholder to display when empty */\\n    placeholder: PropTypes.string,\\n\\n    /** Value */\\n    value: PropTypes.any,\\n\\n    /** String to display when error occurs */\\n    error: PropTypes.string,\\n\\n    /** Child component to display next to the input */\\n    children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInputStyledComponents from 'kar-react/TextInputStyledComponents';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n    render() {\\n        return (\\n            <TextInputStyledComponents\\n                htmlId=\\\"example-error\\\"\\n                label=\\\"First Name\\\"\\n                name=\\\"firstname\\\"\\n                onChange={() => { }}\\n                required\\n                error=\\\"First name is required.\\\"\\n            />\\n        )\\n    }\\n}\\n\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React from 'react';\\nimport TextInputStyledComponents from 'kar-react/TextInputStyledComponents';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n    render() {\\n        return (\\n            <TextInputStyledComponents\\n                htmlId=\\\"example-optional\\\"\\n                label=\\\"First Name\\\"\\n                name=\\\"firstname\\\"\\n                onChange={() => { }}\\n            />\\n        )\\n    }\\n}\\n\"}]}]","import React from 'react';\nimport EyeIcon from 'kar-react/EyeIcon';\n\nexport default function EyeIconExample() {\n    return <EyeIcon />;\n}\n","import React from 'react';\nimport Label from 'kar-react/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n    return <Label htmlFor=\"test\" label=\"test\" />\n}\n","import React from 'react';\nimport Label from 'kar-react/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n    return <Label htmlFor=\"test\" label=\"test\" required />\n}","import React from 'react';\nimport PasswordInput from 'kar-react/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            password: ''\n        };\n    }\n\n    getQuality() {\n        const length = this.state.password.length;\n        return length > 10 ? 100 : length * 10;\n    }\n\n    render() {\n        return (\n            <div>\n                <PasswordInput\n                    htmlId=\"password-input-example-all-features\"\n                    name=\"password\"\n                    onChange={event => this.setState({ password: event.target.value })}\n                    value={this.state.password}\n                    minLength={8}\n                    placeholder=\"Enter password\"\n                    showVisibilityToggle\n                    quality={this.getQuality()}\n                    {...this.props} />\n            </div>\n        )\n    }\n}\n\nexport default ExampleAllFeatures;\n","import React from 'react';\nimport ProgressBar from 'kar-react/ProgressBar'\n\n/** 100 Percent and width height 20px */\nexport default function Example10Percent() {\n    return <ProgressBar percent={30} width={200} height={20} />\n}\n","import React from 'react';\nimport ProgressBar from 'kar-react/ProgressBar'\n\n/** 10 Percent */\nexport default function Example10Percent() {\n    return <ProgressBar percent={10} width={200} />\n}\n","import React from 'react';\nimport ProgressBar from 'kar-react/ProgressBar'\n\n/** 65 Percent */\nexport default function Example10Percent() {\n    return <ProgressBar percent={65} width={200} />\n}\n","import React from 'react';\nimport TextInput from 'kar-react/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInput\n                htmlId=\"example-error\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => { }}\n                required\n                error=\"First name is required.\"\n            />\n        )\n    }\n}\n","import React from 'react';\nimport TextInput from 'kar-react/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n    render() {\n        return (\n            <TextInput\n                htmlId=\"example-optional\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => { }}\n            />\n        )\n    }\n}\n","import React from 'react';\nimport TextInputBEM from 'kar-react/TextInputBEM';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInputBEM\n                htmlId=\"example-error\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => { }}\n                required\n                error=\"First name is required.\"\n            />\n        )\n    }\n}\n","import React from 'react';\nimport TextInputBEM from 'kar-react/TextInputBEM';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n    render() {\n        return (\n            <TextInputBEM\n                htmlId=\"example-optional\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => { }}\n            />\n        )\n    }\n}\n","import React from 'react';\nimport TextInputStyledComponents from 'kar-react/TextInputStyledComponents';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInputStyledComponents\n                htmlId=\"example-error\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => { }}\n                required\n                error=\"First name is required.\"\n            />\n        )\n    }\n}\n","import React from 'react';\nimport TextInputStyledComponents from 'kar-react/TextInputStyledComponents';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n    render() {\n        return (\n            <TextInputStyledComponents\n                htmlId=\"example-optional\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => { }}\n            />\n        )\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {\n                email: '',\n                password: ''\n            },\n            errors: {},\n            submitted: false,\n        };\n    }\n\n    onChange = (event) => {\n        const user = this.state.user;\n        user[event.target.name] = event.target.value;\n        this.setState({ user });\n    }\n\n    // Returns a number from 0 to 100 that represents password quality.\n    // For simplicity, just returning % of min length entered.\n    // Could enhance with checks for number, special char, unique characters, etc.\n    passwordQuality(password) {\n        if (!password) return null;\n        if (password.length >= this.props.minPasswordLength) return 100;\n        const percentOfMinLength = parseInt(password.length / this.props.minPasswordLength * 100, 10);\n        return percentOfMinLength;\n    }\n\n    validate({ email, password }) {\n        const errors = {};\n        const { minPasswordLength } = this.props;\n\n        if (!email) errors.email = 'Email required.';\n        if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n        this.setState({ errors });\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n        return formIsValid;\n    }\n\n    onSubmit = () => {\n        const { user } = this.state;\n        const formIsValid = this.validate(user);\n        if (formIsValid) {\n            this.props.onSubmit(user);\n            this.setState({ submitted: true });\n        }\n    }\n\n    render() {\n        const { errors, submitted } = this.state;\n        const { email, password } = this.state.user;\n\n        return (\n            submitted ?\n                <h2>{this.props.confirmationMessage}</h2> :\n                <div>\n                    <TextInput\n                        htmlId=\"registration-form-email\"\n                        name=\"email\"\n                        onChange={this.onChange}\n                        label=\"Email\"\n                        value={email}\n                        error={errors.email}\n                        required />\n\n                    <PasswordInput\n                        htmlId=\"registration-form-password\"\n                        name=\"password\"\n                        value={password}\n                        onChange={this.onChange}\n                        quality={this.passwordQuality(password)}\n                        showVisibilityToggle\n                        maxLength={50}\n                        error={errors.password} />\n\n                    <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n                </div>\n        )\n    }\n}\n\nRegistrationForm.propTypes = {\n    /** Message displayed upon successful submission */\n    confirmationMessage: PropTypes.string,\n\n    /** Called when form is submitted */\n    onSubmit: PropTypes.func.isRequired,\n\n    /** Minimum password length */\n    minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n    confirmationMessage: \"Thanks for registering!\",\n    minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import React from 'react';\nimport RegistrationForm from 'kar-react/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n    onSubmit = (user) => {\n        console.log(user);\n    }\n\n    render() {\n        return <RegistrationForm onSubmit={this.onSubmit} />\n    }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/**  A super lame component that displays hellow*/\nconst HelloWorld = ({ message }) => {\n    return (\n        <div>\n            <h1>Hello {message}</h1>\n        </div>\n    )\n}\n\nHelloWorld.propTypes = {\n    /** Message to display */\n    message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n    message: 'World'\n};\n\nexport default HelloWorld;\n","import React from 'react';\nimport HelloWorld from 'kar-react/HelloWorld';\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n    return <HelloWorld message=\"Karthick Ragavendran!!\" />\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styles from './textInput.css';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({ htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props }) {\n    return (\n        <div className={styles.fieldset}>\n            <Label htmlFor={htmlId} label={label} required={required} />\n            <input\n                id={htmlId}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n                className={error && styles.inputError}\n                {...props} />\n            {children}\n            {error && <div className={styles.error}>{error}</div>}\n        </div>\n    );\n};\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n\n    /** Input label */\n    label: PropTypes.string.isRequired,\n\n    /** Input type */\n    type: PropTypes.oneOf(['text', 'number', 'password']),\n\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n\n    /** Value */\n    value: PropTypes.any,\n\n    /** String to display when error occurs */\n    error: PropTypes.string,\n\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport TextInputCSSModules from 'kar-react/TextInputCSSModules';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInputCSSModules\n                htmlId=\"example-error\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => { }}\n                required\n                error=\"First name is required.\"\n            />\n        )\n    }\n}\n","var map = {\n\t\"./EyeIcon/ExampleEyeIcon\": 22,\n\t\"./EyeIcon/ExampleEyeIcon.js\": 22,\n\t\"./HelloWorld/ExampleHelloWorld\": 36,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 36,\n\t\"./Label/ExampleLabelOptional\": 23,\n\t\"./Label/ExampleLabelOptional.js\": 23,\n\t\"./Label/ExampleRequired\": 24,\n\t\"./Label/ExampleRequired.js\": 24,\n\t\"./PasswordInput/ExampleAllFeatures\": 25,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 25,\n\t\"./ProgressBar/Example100Percent\": 26,\n\t\"./ProgressBar/Example100Percent.js\": 26,\n\t\"./ProgressBar/Example10Percent\": 27,\n\t\"./ProgressBar/Example10Percent.js\": 27,\n\t\"./ProgressBar/Example65Percent\": 28,\n\t\"./ProgressBar/Example65Percent.js\": 28,\n\t\"./RegistrationForm/ExampleForm\": 35,\n\t\"./RegistrationForm/ExampleForm.js\": 35,\n\t\"./TextInput/ExampleError\": 29,\n\t\"./TextInput/ExampleError.js\": 29,\n\t\"./TextInput/ExampleOptional\": 30,\n\t\"./TextInput/ExampleOptional.js\": 30,\n\t\"./TextInputBEM/ExampleError\": 31,\n\t\"./TextInputBEM/ExampleError.js\": 31,\n\t\"./TextInputBEM/ExampleOptional\": 32,\n\t\"./TextInputBEM/ExampleOptional.js\": 32,\n\t\"./TextInputCSSModules/ExampleTextInputCSSExample\": 37,\n\t\"./TextInputCSSModules/ExampleTextInputCSSExample.js\": 37,\n\t\"./TextInputStyledComponents/ExampleError\": 33,\n\t\"./TextInputStyledComponents/ExampleError.js\": 33,\n\t\"./TextInputStyledComponents/ExampleOptional\": 34,\n\t\"./TextInputStyledComponents/ExampleOptional.js\": 34\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 49;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({ components }) => {\n    return (\n        <ul className=\"navigation\">\n            {\n                components.map(name => {\n                    return (\n                        <li key={name}>\n                            <a href={`#${name}`}>{name}</a>\n                        </li>\n                    )\n                })\n            }\n        </ul>\n    )\n}\n\nNavigation.propTypes = {\n    components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/highlight'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n    componentDidMount() {\n        hljs.registerLanguage('javascript', javascript);\n        hljs.highlightBlock(this.element);\n    }\n\n    render() {\n        return (\n            <pre ref={ref => { this.element = ref }}>\n                <code>\n                    {this.props.children}\n                </code>\n            </pre>\n        )\n    }\n}\n\nCodeExample.propTypes = {\n    children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\n\nclass Example extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { showCode: false };\n    }\n\n    toggleCode = event => {\n        event.preventDefault();\n        this.setState(prevState => {\n            return { showCode: !prevState.showCode };\n        });\n    }\n\n    render() {\n        const { showCode } = this.state;\n        const { code, description, name } = this.props.example;\n        // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n        const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;\n        return (\n            <div className=\"example\">\n                {description && <h4>{description}</h4>}\n\n                <ExampleComponent />\n\n                <p>\n                    <a href=\"\" onClick={this.toggleCode}>\n                        {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n                </p>\n\n                {showCode && <CodeExample>{code}</CodeExample>}\n            </div>\n        )\n    }\n}\n\nExample.propTypes = {\n    example: PropTypes.object.isRequired,\n    componentName: PropTypes.string.isRequired\n}\n\nexport default Example;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({ props }) => {\n    console.log(props);\n\n    return (\n        <table className=\"props\">\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Description</th>\n                    <th>Type</th>\n                    <th>Default</th>\n                    <th>Required</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    Object.keys(props).map(key => {\n                        return (\n                            <tr key={key}>\n                                <td>{key}</td>\n                                <td>{props[key].description}</td>\n                                <td>{props[key].name}</td>\n                                <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n                                <td>{props[key].required && \"X\"}</td>\n                            </tr>\n                        );\n                    })\n                }\n            </tbody>\n        </table>\n    )\n}\n\nProps.propTypes = {\n    props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({ component }) => {\n    const { name, description, props, examples } = component;\n\n    return (\n        <div className=\"componentpage\">\n            <h2>{name}</h2>\n            <p>{description}</p>\n\n            <h3>Example{examples.length > 1 && \"s\"}</h3>\n            {\n                examples.length > 0 ?\n                    examples.map(example => <Example key={example.code} example={example} componentName={name} />) :\n                    \"No examples exist.\"\n            }\n\n            <h3>Props</h3>\n            {\n                props ?\n                    <Props props={props} /> :\n                    \"This component accepts no props.\"\n            }\n        </div>\n    )\n};\n\nComponentPage.propTypes = {\n    component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from 'react';\nimport Navigation from './Navigation';\nimport ComponentPage from './ComponentPage';\nimport componentData from '../../config/componentData';\n\nexport default class Docs extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            route: window.location.hash.substr(1)\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('hashchange', () => {\n            this.setState({ route: window.location.hash.substr(1) })\n        })\n    }\n\n    render() {\n        const { route } = this.state;\n        const component = route ? componentData.filter(component => component.name === route)[0] : componentData[0];\n\n        return (\n            <div>\n                <Navigation components={componentData.map(component => component.name)} />\n                <ComponentPage component={component} />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Docs from './docs/Docs';\nimport './index.css';\n\nReactDOM.render(<Docs />, document.getElementById('root'));\n"],"sourceRoot":""}